//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assessment.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserClass", Namespace="http://schemas.datacontract.org/2004/07/Assessment_Service")]
    [System.SerializableAttribute()]
    public partial class UserClass : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((this.RoleIdField.Equals(value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogFailed", Namespace="http://schemas.datacontract.org/2004/07/Assessment_Service")]
    [System.SerializableAttribute()]
    public partial class LogFailed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FailedAttemptsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FailedAttemptsCount {
            get {
                return this.FailedAttemptsCountField;
            }
            set {
                if ((this.FailedAttemptsCountField.Equals(value) != true)) {
                    this.FailedAttemptsCountField = value;
                    this.RaisePropertyChanged("FailedAttemptsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataListInfo", Namespace="http://schemas.datacontract.org/2004/07/Assessment_Service")]
    [System.SerializableAttribute()]
    public partial class DataListInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditData", Namespace="http://schemas.datacontract.org/2004/07/Assessment_Service")]
    [System.SerializableAttribute()]
    public partial class EditData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RegistrationDetails", ReplyAction="http://tempuri.org/IUserService/RegistrationDetailsResponse")]
        int RegistrationDetails(string firstName, string lastName, string emailId, string mobileNo, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RegistrationDetails", ReplyAction="http://tempuri.org/IUserService/RegistrationDetailsResponse")]
        System.Threading.Tasks.Task<int> RegistrationDetailsAsync(string firstName, string lastName, string emailId, string mobileNo, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LoginDetails", ReplyAction="http://tempuri.org/IUserService/LoginDetailsResponse")]
        Assessment.ServiceReference1.UserClass LoginDetails(string emailId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LoginDetails", ReplyAction="http://tempuri.org/IUserService/LoginDetailsResponse")]
        System.Threading.Tasks.Task<Assessment.ServiceReference1.UserClass> LoginDetailsAsync(string emailId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LogFailedLoginAttempt", ReplyAction="http://tempuri.org/IUserService/LogFailedLoginAttemptResponse")]
        Assessment.ServiceReference1.UserClass LogFailedLoginAttempt(string emailId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LogFailedLoginAttempt", ReplyAction="http://tempuri.org/IUserService/LogFailedLoginAttemptResponse")]
        System.Threading.Tasks.Task<Assessment.ServiceReference1.UserClass> LogFailedLoginAttemptAsync(string emailId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLogInfo", ReplyAction="http://tempuri.org/IUserService/GetLogInfoResponse")]
        Assessment.ServiceReference1.LogFailed[] GetLogInfo(string emailId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLogInfo", ReplyAction="http://tempuri.org/IUserService/GetLogInfoResponse")]
        System.Threading.Tasks.Task<Assessment.ServiceReference1.LogFailed[]> GetLogInfoAsync(string emailId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/SearchLogInfo", ReplyAction="http://tempuri.org/IUserService/SearchLogInfoResponse")]
        Assessment.ServiceReference1.LogFailed[] SearchLogInfo(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/SearchLogInfo", ReplyAction="http://tempuri.org/IUserService/SearchLogInfoResponse")]
        System.Threading.Tasks.Task<Assessment.ServiceReference1.LogFailed[]> SearchLogInfoAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserDetails", ReplyAction="http://tempuri.org/IUserService/UserDetailsResponse")]
        int UserDetails(int userId, string city, string state, string country, string gender, System.DateTime dob, byte[] profileImage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserDetails", ReplyAction="http://tempuri.org/IUserService/UserDetailsResponse")]
        System.Threading.Tasks.Task<int> UserDetailsAsync(int userId, string city, string state, string country, string gender, System.DateTime dob, byte[] profileImage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FetchUserData", ReplyAction="http://tempuri.org/IUserService/FetchUserDataResponse")]
        Assessment.ServiceReference1.DataListInfo[] FetchUserData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FetchUserData", ReplyAction="http://tempuri.org/IUserService/FetchUserDataResponse")]
        System.Threading.Tasks.Task<Assessment.ServiceReference1.DataListInfo[]> FetchUserDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsers", ReplyAction="http://tempuri.org/IUserService/GetUsersResponse")]
        Assessment.ServiceReference1.EditData GetUsers(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsers", ReplyAction="http://tempuri.org/IUserService/GetUsersResponse")]
        System.Threading.Tasks.Task<Assessment.ServiceReference1.EditData> GetUsersAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserData", ReplyAction="http://tempuri.org/IUserService/UpdateUserDataResponse")]
        bool UpdateUserData(Assessment.ServiceReference1.EditData userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserData", ReplyAction="http://tempuri.org/IUserService/UpdateUserDataResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserDataAsync(Assessment.ServiceReference1.EditData userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateChangeRole", ReplyAction="http://tempuri.org/IUserService/UpdateChangeRoleResponse")]
        bool UpdateChangeRole(int userId, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateChangeRole", ReplyAction="http://tempuri.org/IUserService/UpdateChangeRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateChangeRoleAsync(int userId, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUserId", ReplyAction="http://tempuri.org/IUserService/DeleteUserIdResponse")]
        string DeleteUserId(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUserId", ReplyAction="http://tempuri.org/IUserService/DeleteUserIdResponse")]
        System.Threading.Tasks.Task<string> DeleteUserIdAsync(int userid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Assessment.ServiceReference1.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Assessment.ServiceReference1.IUserService>, Assessment.ServiceReference1.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int RegistrationDetails(string firstName, string lastName, string emailId, string mobileNo, string password) {
            return base.Channel.RegistrationDetails(firstName, lastName, emailId, mobileNo, password);
        }
        
        public System.Threading.Tasks.Task<int> RegistrationDetailsAsync(string firstName, string lastName, string emailId, string mobileNo, string password) {
            return base.Channel.RegistrationDetailsAsync(firstName, lastName, emailId, mobileNo, password);
        }
        
        public Assessment.ServiceReference1.UserClass LoginDetails(string emailId, string password) {
            return base.Channel.LoginDetails(emailId, password);
        }
        
        public System.Threading.Tasks.Task<Assessment.ServiceReference1.UserClass> LoginDetailsAsync(string emailId, string password) {
            return base.Channel.LoginDetailsAsync(emailId, password);
        }
        
        public Assessment.ServiceReference1.UserClass LogFailedLoginAttempt(string emailId, string password) {
            return base.Channel.LogFailedLoginAttempt(emailId, password);
        }
        
        public System.Threading.Tasks.Task<Assessment.ServiceReference1.UserClass> LogFailedLoginAttemptAsync(string emailId, string password) {
            return base.Channel.LogFailedLoginAttemptAsync(emailId, password);
        }
        
        public Assessment.ServiceReference1.LogFailed[] GetLogInfo(string emailId, string password) {
            return base.Channel.GetLogInfo(emailId, password);
        }
        
        public System.Threading.Tasks.Task<Assessment.ServiceReference1.LogFailed[]> GetLogInfoAsync(string emailId, string password) {
            return base.Channel.GetLogInfoAsync(emailId, password);
        }
        
        public Assessment.ServiceReference1.LogFailed[] SearchLogInfo(string username) {
            return base.Channel.SearchLogInfo(username);
        }
        
        public System.Threading.Tasks.Task<Assessment.ServiceReference1.LogFailed[]> SearchLogInfoAsync(string username) {
            return base.Channel.SearchLogInfoAsync(username);
        }
        
        public int UserDetails(int userId, string city, string state, string country, string gender, System.DateTime dob, byte[] profileImage) {
            return base.Channel.UserDetails(userId, city, state, country, gender, dob, profileImage);
        }
        
        public System.Threading.Tasks.Task<int> UserDetailsAsync(int userId, string city, string state, string country, string gender, System.DateTime dob, byte[] profileImage) {
            return base.Channel.UserDetailsAsync(userId, city, state, country, gender, dob, profileImage);
        }
        
        public Assessment.ServiceReference1.DataListInfo[] FetchUserData() {
            return base.Channel.FetchUserData();
        }
        
        public System.Threading.Tasks.Task<Assessment.ServiceReference1.DataListInfo[]> FetchUserDataAsync() {
            return base.Channel.FetchUserDataAsync();
        }
        
        public Assessment.ServiceReference1.EditData GetUsers(int userID) {
            return base.Channel.GetUsers(userID);
        }
        
        public System.Threading.Tasks.Task<Assessment.ServiceReference1.EditData> GetUsersAsync(int userID) {
            return base.Channel.GetUsersAsync(userID);
        }
        
        public bool UpdateUserData(Assessment.ServiceReference1.EditData userInfo) {
            return base.Channel.UpdateUserData(userInfo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserDataAsync(Assessment.ServiceReference1.EditData userInfo) {
            return base.Channel.UpdateUserDataAsync(userInfo);
        }
        
        public bool UpdateChangeRole(int userId, string role) {
            return base.Channel.UpdateChangeRole(userId, role);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateChangeRoleAsync(int userId, string role) {
            return base.Channel.UpdateChangeRoleAsync(userId, role);
        }
        
        public string DeleteUserId(int userid) {
            return base.Channel.DeleteUserId(userid);
        }
        
        public System.Threading.Tasks.Task<string> DeleteUserIdAsync(int userid) {
            return base.Channel.DeleteUserIdAsync(userid);
        }
    }
}
